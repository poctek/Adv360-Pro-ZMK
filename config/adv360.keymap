/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&mt { tapping-term-ms = <300>; };

&lt {
    require-prior-idle-ms = <150>;
    tapping-term-ms = <280>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_minus {
            bindings = <&kp MINUS>;
            key-positions = <40 41>;
            timeout-ms = <50>;
        };

        combo_underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <41 42>;
            timeout-ms = <50>;
        };

        combo_plus {
            bindings = <&kp PLUS>;
            key-positions = <54 55>;
            timeout-ms = <50>;
        };

        combo_equal {
            bindings = <&kp EQUAL>;
            key-positions = <56 55>;
            timeout-ms = <50>;
        };

        combo_lbc {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <31 32>;
            timeout-ms = <50>;
        };

        combo_rpar {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <32 33>;
            timeout-ms = <50>;
        };

        combo_lbrc {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <18 17>;
            timeout-ms = <50>;
        };

        combo_rbrc {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <18 19>;
            timeout-ms = <50>;
        };

        combo_lsqbrc {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <49 50>;
            timeout-ms = <50>;
        };

        combo_rsqbrc {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <50 51>;
            timeout-ms = <50>;
        };

        combo_two_dots {
            bindings = <&kp COLON>;
            key-positions = <43 44>;
        };

        combo_larrow {
            bindings = <&kp LESS_THAN>;
            key-positions = <24 25>;
        };

        combo_rarrow {
            bindings = <&kp GREATER_THAN>;
            key-positions = <25 26>;
        };

        combo_rlang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <42 43>;
        };

        combo_llang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <31 30>;
        };

        combo_dquotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <43 44>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <22 23>;
        };

        combo_dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <23 24>;
        };
    };
};

/ {
    behaviors {
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP DANCE CMD";
            #binding-cells = <0>;
            tapping-term-ms = <350>;
            bindings = <&kp LGUI>, <&kp RGUI>;
        };

        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP DANCE LCTRL to ESC";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LCTRL>, <&kp ESC>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <7 8 9 10 11 12 13 7 21 37 38 39 53 69 7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 54 55 56 57 58 59 70 71 72 73 74 75 68 29 30 31 32>;
            require-prior-idle-ms = <225>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67 44 43 42 41>;
            require-prior-idle-ms = <225>;
            hold-trigger-on-release;
        };

        nmp: nmp {
            compatible = "zmk,behavior-hold-tap";
            label = "NMP";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <12 37 12 23 24 25 26 37 41 42 43 44 55 56 57 58 70 71 72 73 74 50 11 10 9>;
            require-prior-idle-ms = <225>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };

        btr: btr {
            compatible = "zmk,behavior-hold-tap";
            label = "BTR";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <16 17 18 30 31 32 48 49 50 56>;
            require-prior-idle-ms = <225>;
            hold-trigger-on-release;
        };

        btl: btl {
            compatible = "zmk,behavior-hold-tap";
            label = "BTL";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <23 23 24 25 26 41 42 43 44 55 56 57 58 49>;
            require-prior-idle-ms = <225>;
            hold-trigger-on-release;
        };

        hml_shift: hml_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_SHIFT";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <7 8 9 10 11 12 13 7 21 37 38 39 53 69 7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 54 55 56 57 58 59 70 71 72 73 74 75 68 32>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            quick-tap-ms = <175>;
        };

        td_shift_caps: td_shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LSHIFT>, <&caps_word>;
        };

        td_comma: td_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COMMA";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&macro_comma_space>;
        };

        td_copilot_comlpete: td_copilot_comlpete {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_COPILOT_COMLPETE";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp LC(BSLH)>;
        };

        td_workspace_1: td_workspace_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_WORKSPACE_1";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1>, <&kp LC(NUMBER_1)>;
        };

        td_workspace_3: td_workspace_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_WORKSPACE_3";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_3>, <&kp LC(NUMBER_3)>;
        };

        td_workspace_2: td_workspace_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_WORKSPACE_2";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_2>, <&kp LC(NUMBER_2)>;
        };

        td_workspace_4: td_workspace_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_WORKSPACE_4";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_4>, <&kp LC(NUMBER_4)>;
        };
    };

    macros {
        macro_vim_copy: macro_vim_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp ASTERISK &kp Y>;
            label = "MACRO_VIM_COPY";
        };

        macro_tmux_visual_mode: macro_tmux_visual_mode {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LBKT>;
            label = "MACRO_TMUX_VISUAL_MODE";
        };

        macro_delete_word: macro_delete_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(BACKSPACE)>;
            label = "MACRO_DELETE_WORD";
        };

        macro_vim_save_exit: macro_vim_save_exit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W &kp Q &kp ENTER>;
            label = "MACRO_VIM_SAVE_EXIT";
        };

        macro_vim_exit_no_save: macro_vim_exit_no_save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp Q &kp A &kp EXCL &kp ENTER>;
            label = "MACRO_VIM_EXIT_NO_SAVE";
        };

        macro_comma_space: macro_comma_space {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(SLASH) &kp SPACE>;
            label = "MACRO_COMMA_SPACE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp EQUAL       &td_workspace_1  &td_workspace_2  &td_workspace_3  &td_workspace_4  &kp N5  &tog 4                                                                                         &mo 5                   &kp N6  &kp N7  &kp N8     &kp N9       &kp N0         &kp MINUS
&kp TAB         &kp Q            &kp W            &kp E            &kp R            &kp T   &kp LS(LC(LA(LG(N1))))                                                                         &kp LS(LC(LA(LG(N3))))  &kp Y   &kp U   &kp I      &kp O        &kp P          &td_copilot_comlpete
&td1            &kp A            &kp S            &kp D            &kp F            &kp G   &kp LS(LC(LA(LG(N2))))  &kp LG(SPACE)  &kp LALT               &kp LG(T)         &kp RG(SPACE)  &kp LS(LC(LA(LG(N4))))  &kp H   &kp J   &kp K      &hmr RALT L  &kp SEMICOLON  &mt RIGHT_CONTROL SINGLE_QUOTE
&td_shift_caps  &kp Z            &kp X            &kp C            &nmp 4 V         &kp B                                          &kp C_PLAY_PAUSE       &kp LG(LA(UP))                                           &kp N   &kp M   &kp COMMA  &td_comma    &kp FSLH       &td_shift_caps
&mo 1           &kp GRAVE        &kp LG(SPACE)    &kp LEFT         &kp RIGHT                &kp LCMD                &kp BACKSPACE  &kp LG(LS(SPACE))      &kp LG(LA(DOWN))  &kp ENTER      &kp SPACE                       &kp UP  &kp DOWN   &kp LBKT     &kp RBKT       &mo 1
            >;
        };

        fn {
            bindings = <
&kp F1   &kp F2                   &kp F3                &kp F4              &kp F5    &trans  &tog 0                                                      &mo 4                   &kp F7                   &kp F8          &kp F9      &kp F10      &kp F11    &kp F12
&trans   &macro_vim_exit_no_save  &macro_vim_save_exit  &kp LBRC            &kp RBRC  &trans  &kp LS(LC(LA(LG(N5))))                                      &kp LS(LC(LA(LG(N7))))  &macro_vim_copy          &kp CARET       &kp DOLLAR  &kp PERCENT  &trans     &trans
&kp ESC  &kp LA(LEFT)             &kp LA(RIGHT)         &kp LPAR            &kp RPAR  &trans  &kp LS(LC(LA(LG(N6))))  &trans  &trans      &trans  &trans  &kp LS(LC(LA(LG(N8))))  &kp LEFT                 &kp DOWN        &kp UP      &kp RIGHT    &trans     &kp ESC
&trans   &kp LG(LEFT)             &kp LG(RIGHT)         &kp LBKT            &kp RBKT  &trans                                  &trans      &trans                                  &macro_tmux_visual_mode  &kp UNDERSCORE  &kp MINUS   &kp PLUS     &kp EQUAL  &trans
&trans   &trans                   &trans                &macro_delete_word  &trans            &kp RGUI                &trans  &trans      &trans  &trans  &kp RGUI                                         &trans          &trans      &trans       &trans     &trans
            >;
        };

        better_typings {
            bindings = <
&trans  &trans  &trans  &trans                &trans                 &trans  &trans                                      &trans  &trans     &trans          &trans    &trans     &trans       &trans
&trans  &trans  &trans  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans  &trans                                      &trans  &trans     &trans          &trans    &trans     &trans       &trans
&trans  &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp MINUS  &kp UNDERSCORE  &kp PLUS  &kp EQUAL  &kp RG(TAB)  &trans
&trans  &trans  &trans  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans                  &trans      &trans                  &trans     &trans          &trans    &trans     &trans       &trans
&trans  &trans  &trans  &trans                &trans                         &trans  &trans  &trans      &trans  &trans  &trans             &trans          &trans    &trans     &trans       &trans
            >;
        };

        layer_text_edit {
            bindings = <
&kp F1     &kp F2      &kp F3     &kp F4      &kp F5       &kp F6  &to 0                                                    &mo 4              &kp F7        &kp F8        &kp F9      &kp F10        &kp F11  &kp F12
&trans     &trans      &trans     &trans      &kp K_REDO   &trans  &none                                                    &none              &kp LG(LEFT)  &kp LG(DOWN)  &kp LG(UP)  &kp LG(RIGHT)  &trans   &trans
&trans     &trans      &trans     &trans      &trans       &trans  &none     &to 0              &trans      &trans  &trans  &none              &kp LA(LEFT)  &kp LA(DOWN)  &kp LA(UP)  &kp LA(RIGHT)  &trans   &trans
&kp LSHFT  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &trans                               &trans      &trans                             &trans        &trans        &trans      &trans         &trans   &kp RSHIFT
&trans     &trans      &trans     &kp LEFT    &kp RIGHT            &kp LGUI  &kp LA(BACKSPACE)  &trans      &trans  &to 0   &kp LA(BACKSPACE)                &kp UP        &kp DOWN    &trans         &trans   &trans
            >;
        };

        keypad {
            bindings = <
&kp EQUAL  &kp N1     &kp N2    &kp N3    &kp N4     &kp N5  &trans                                                           &mo 4      &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp TAB    &kp Q      &trans    &trans    &trans     &kp T   &none                                                            &none      &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp BSLH
&kp ESC    &kp A      &kp S     &kp D     &kp F      &kp G   &none         &kp LCTRL      &kp LALT      &kp LGUI   &kp RCTRL  &none      &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp SQT
&kp LSHFT  &kp Z      &kp X     &kp C     &kp V      &kp B                                &kp HOME      &kp PG_UP                        &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RSHFT
&mo 1      &kp GRAVE  &kp CAPS  &kp LEFT  &kp RIGHT          &kp LEFT_GUI  &kp BACKSPACE  &kp END       &kp PG_DN  &kp ENTER  &kp KP_N0          &kp UP      &kp DOWN      &kp KP_DOT     &kp RBKT         &mo 1
            >;
        };

        layer_mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
